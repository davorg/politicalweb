#!/usr/bin/perl

use strict;
use warnings;

use WebService::TWFY::API;
use XML::LibXML;
use FindBin '$Bin';
use lib "$Bin/../lib";

use PoliticalWeb::Schema;

my $sch = PoliticalWeb::Schema->connect(
  "dbi:mysql:database=$ENV{POLITICALWEB_DB};host=$ENV{POLITICALWEB_DB_SERVER}",
  $ENV{POLITICALWEB_DB_USER}, $ENV{POLITICALWEB_DB_PASS},
);

my $mp_rs = $sch->resultset('Mp');

my $api = WebService::TWFY::API->new(
  { key => $ENV{TWFY_KEY} }
);

my $doc = twfy_qry('getMPs', $api);

my @mps;
foreach ($doc->findnodes('//match')) {
  push @mps, {
              id      => $_->findvalue('person_id'),
              m_id    => $_->findvalue('member_id'),
              name    => $_->findvalue('name'),
              party   => $_->findvalue('party'),
              constit => $_->findvalue('constituency'),
             };
}

my $i = 1;

foreach (@mps) {

  $doc = twfy_qry('getMP', $api, { id => $_->{id} });

  if (my @nodes = $doc->findnodes('//match')) {
    $_->{image} = $nodes[0]->findvalue('image');
  }

  $doc = twfy_qry('getMPInfo', $api, { id => $_->{id} });

  next unless $doc;

  $_->{bbc}  = $doc->findvalue('//bbc_profile_url');
  $_->{wp}   = $doc->findvalue('//wikipedia_url');
  $_->{gu}   = $doc->findvalue('//guardian_mp_summary');
  $_->{edmi} = $doc->findvalue('//edm_ais_url');
  $_->{site} = $doc->findvalue('//mp_website');

#  print $i++, ' : ', $_->{name}, ' / ', $_->{constit}, "\n";

  my $mp = $mp_rs->create({
    mp_name => $_->{name},
    twfy_id => $_->{id},
    image_url => $_->{image},
    party => $_->{party},
    # twfy_mem_id => $_->{m_id},
    bbc_url => $_->{bbc_url},
    guardian_url => $_->{gu},
    edm_url => $_->{edmi},
    wikipedia_url => $_->{wp},
    # official_site_url => $_->{site},
  });
  
  $mp->add_to_constituencies({ name => $_->{constit} });
}



sub twfy_qry {
  my ($qry, $api, $params) = @_;

  $params = {} unless defined $params;

  $params = { output => 'xml', %$params };

  my $rc = $api->query($qry, $params);
  
  die $rc->{error_code} unless $rc->is_success;

  unless ($rc->{results}) {
    warn 'Weirdness!';
    return;
  }

  return XML::LibXML->new->parse_string($rc->{results});
}
